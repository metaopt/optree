# Package ######################################################################

[build-system]
requires = ["setuptools", "pybind11"]
build-backend = "setuptools.build_meta"

[project]
name = "optree"
description = "Optimized PyTree Utilities."
readme = "README.md"
requires-python = ">= 3.7"
authors = [
    { name = "OpTree Contributors" },
    { name = "Xuehai Pan", email = "XuehaiPan@pku.edu.cn" },
    { name = "Jie Ren", email = "jieren9806@gmail.com" },
]
license = { text = "Apache License, Version 2.0" }
keywords = [
    "PyTree",
    "Tree Manipulation",
    "Tree Traversal",
    "Functional Programming",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Utilities",
]
dependencies = ["typing-extensions >= 4.0.0"]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/metaopt/optree"
Repository = "https://github.com/metaopt/optree"
Documentation = "https://optree.readthedocs.io"
"Bug Report" = "https://github.com/metaopt/optree/issues"

[project.optional-dependencies]
lint = [
    "isort >= 5.11.0",
    "black >= 22.6.0",
    "pylint[spelling] >= 2.15.0",
    "mypy >= 0.990",
    "flake8",
    "flake8-bugbear",
    "flake8-comprehensions",
    "flake8-docstrings",
    "flake8-pyi",
    "flake8-simplify",
    "ruff",
    "doc8 < 1.0.0a0",  # unpin this when we drop support for Python 3.7
    "pydocstyle",
    "pyenchant",
    "xdoctest",
    "cpplint",
    "pre-commit",
]
test = ["pytest", "pytest-cov", "pytest-xdist"]
benchmark = [
    "jax[cpu] >= 0.4.6, < 0.5.0a0",
    "torch >= 2.0, < 2.1.0a0",
    "torchvision",
    "dm-tree >= 0.1, < 0.2.0a0",
    "pandas",
    "tabulate",
    "termcolor",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["optree", "optree.*"]

[tool.setuptools.package-data]
optree = ['*.so', '*.pyd']

# Wheel builder ################################################################
# Reference: https://cibuildwheel.readthedocs.io
[tool.cibuildwheel]
archs = ["auto64"]
skip = "*musllinux*"
build-frontend = "build"
build-verbosity = 3
container-engine = "docker"
test-extras = ["test"]
test-command = """make -C "{project}" test PYTHON=python"""

# Linter tools #################################################################

[tool.black]
safe = true
line-length = 100
skip-string-normalization = true
target-version = ["py37", "py38", "py39", "py310", "py311"]

[tool.isort]
atomic = true
profile = "black"
src_paths = ["optree", "tests"]
extra_standard_library = ["typing_extensions"]
indent = 4
line_length = 100
lines_after_imports = 2
multi_line_output = 3

[tool.mypy]
python_version = 3.7
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pydocstyle]
convention = "google"

[tool.doc8]
max-line-length = 500

[tool.codespell]
ignore-words = "docs/source/spelling_wordlist.txt"

[tool.ruff]
target-version = "py37"
line-length = 100
show-source = true
src = ["optree", "tests"]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "C90",     # mccabe
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "ANN",     # flake8-annotations
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "EXE",     # flake8-executable
    "ISC",     # flake8-implicit-str-concat
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "RUF",     # ruff
]
ignore = [
    # E501: line too long
    # W505: doc line too long
    # too long docstring due to long example blocks
    "E501",
    "W505",
    # ANN101: missing type annotation for `self` in method
    # ANN102: missing type annotation for `cls` in classmethod
    "ANN101",
    "ANN102",
    # ANN401: dynamically typed expressions (typing.Any) are disallowed
    "ANN401",
    # N999: invalid module name
    # optree._C is not snake_cased
    "N999",
    # S101: use of `assert` detected
    # internal use and may never raise at runtime
    "S101",
    # PLR0402: use from {module} import {name} in lieu of alias
    # use alias for import convention (e.g., `import torch.nn as nn`)
    "PLR0402",
]
typing-modules = ["optree.typing"]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",  # unused-import
]
"optree/typing.py" = [
    "E402",  # module-import-not-at-top-of-file
    "F722",  # forward-annotation-syntax-error
    "F811",  # redefined-while-unused
]
"setup.py" = [
    "ANN",   # flake8-annotations
]
"tests/**/*.py" = [
    "ANN",   # flake8-annotations
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "SIM",   # flake8-simplify
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
filterwarnings = ["error"]
