name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - setup.py
      - setup.cfg
      - pyproject.toml
      - MANIFEST.in
      - CMakeLists.txt
      - include/**
      - src/**
      - tests/**
      - optree/**
      - .github/workflows/tests.yml
  # Allow to trigger the workflow manually
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  OPTREE_CXX_WERROR: "ON"
  FULL_TEST_PYTHON_VERSIONS: "3.10;3.11"
  PYTHON: "python"  # to be updated
  PYTHON_TAG: "py3"  # to be updated
  COLUMNS: "128"

jobs:
  test:
    name: Test for Python ${{ matrix.python-version }} on ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, windows-latest, macos-latest]
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "pypy-3.9"
          - "pypy-3.10"
        include:
          - runner: macos-13
            python-version: "3.7"
        exclude:
          - runner: macos-latest
            python-version: "3.7"  # Python 3.7 does not support macOS ARM64
      fail-fast: false
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          update-environment: true
          allow-prereleases: true

      - name: Set up Environment
        shell: bash
        run: |
          ${{ env.PYTHON }} --version
          ${{ env.PYTHON }} -c 'from pprint import pprint; import sysconfig; pprint(sysconfig.get_config_vars())'
          ${{ env.PYTHON }} -m pip install --upgrade pip setuptools wheel

          PYTHON_TAG="$(
            echo 'import sys; print(
              "{0.name[0]}p{1.major}{1.minor}{2}".format(
                sys.implementation,
                sys.version_info,
                getattr(sys, "abiflags", ""),
              ).lower(),
            )' | ${{ env.PYTHON }} -
          )"
          echo "PYTHON_TAG=${PYTHON_TAG}" | tee -a "${GITHUB_ENV}"

      - name: Install test dependencies
        shell: bash
        run: |
          if [[ ";${FULL_TEST_PYTHON_VERSIONS};" == *";${{ matrix.python-version }};"* ]]; then
            ${{ env.PYTHON }} -m pip install -r tests/requirements.txt
          fi

      - name: Test installable with C++17
        if: runner.os != 'Windows'
        run: |
          OPTREE_CXX_WERROR=OFF CMAKE_CXX_STANDARD=17 ${{ env.PYTHON }} -m pip install -vv --editable .
          ${{ env.PYTHON }} -X dev -W 'always' -W 'error' -c 'import optree'
          ${{ env.PYTHON }} -m pip uninstall -y optree

      - name: Install OpTree
        run: |
          ${{ env.PYTHON }} -m pip install -vv --editable '.[test]'

      - name: Test with pytest
        shell: bash
        run: |
          PYTESTOPTS=(
            "--exitfirst"
            "--cov-report=xml:coverage-${{ env.PYTHON_TAG }}.xml"
            "--junit-xml=junit-${{ env.PYTHON_TAG }}.xml"
          )
          make test PYTESTOPTS="${PYTESTOPTS[*]}"

      - name: List generated files
        if: ${{ !cancelled() }}
        shell: bash
        run: |
          find . -type f -name '*.py[co]' -delete
          find . -depth -type d -name "__pycache__" -exec rm -r "{}" +
          if [[ -n "$(git status --ignored --porcelain | grep -vE '/$')" ]]; then
            ls -alh $(git status --ignored --porcelain | grep -vE '/$' | cut -d ' ' -f2)
          fi

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ runner.os }}
          path: tests/coverage-*.xml
          if-no-files-found: error

      - name: Upload JUnit artifact
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}-${{ runner.os }}
          path: tests/junit-*.xml
          if-no-files-found: error

  upload-coverage:
    name: Upload coverage to Codecov
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage
          merge-multiple: true

      - name: List coverage artifacts
        run: ls -lh coverage/*

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage
          flags: unittests
          name: codecov-umbrella
          verbose: true
          fail_ci_if_error: false

  upload-junit:
    name: Upload JUnit results to Codecov
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 15
    steps:
      - name: Download JUnit artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: junit-*
          path: junit
          merge-multiple: true

      - name: List JUnit artifacts
        run: ls -lh junit/*

      - name: Upload JUnit results to Codecov
        uses: codecov/test-results-action@v1
        with:
          directory: junit
          flags: unittests
          name: junit-umbrella
          verbose: true
          fail_ci_if_error: false
